{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vocard Bot","text":"<p>Vocard is a highly customizable Discord music bot, designed to deliver a user-friendly experience. It offers support for a wide range of streaming platforms including Youtube, Soundcloud, Spotify, Twitch, and more.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fast song loading</li> <li>Works with slash and message commands</li> <li>Lightweight design</li> <li>Smooth playback</li> <li>Clean and nice interface</li> <li>Supports many music platforms (YouTube, SoundCloud, etc.)</li> <li>Built-in playlist support</li> <li>Fully customizable settings</li> <li>Lyrics support</li> <li>Various sound effects</li> <li>Multiple languages available</li> <li>Easy to update</li> <li>Supports docker</li> <li>Premium dashboard (in beta)</li> </ul>"},{"location":"#example-bot","title":"Example Bot","text":"<p>Invite Vocard Bot Visit Vocard Dashboard</p>"},{"location":"#screenshot","title":"Screenshot","text":""},{"location":"#setup","title":"Setup","text":"<p>Please see the Setup Page in the docs to run this bot yourself!</p>"},{"location":"#need-help","title":"Need Help?","text":"<p>Join the Vocard Support Discord for help or questions.</p>"},{"location":"bot/changelog/","title":"Changelog","text":"<p>Each release typically encompasses a variety of enhancements and corrections. Notable updates, along with any new features and significant alterations, are itemized for your convenience.</p>"},{"location":"bot/changelog/#2.7.1","title":"2.7.1 April 19, 2025","text":""},{"location":"bot/changelog/#new-features","title":"New Features:","text":"<ul> <li>Vocard is now available in Polish! 43bf237</li> <li>A new script to help with database migration. 769adbe</li> </ul>"},{"location":"bot/changelog/#fixes","title":"Fixes:","text":"<ul> <li>Resolved issues with playing tracks from sources like Spotify and Apple Music. ac56a22</li> <li>Corrected wording in the English language pack. b31ab2b</li> <li>Corrected wording in the Russian language pack. 6e74ad4</li> </ul>"},{"location":"bot/changelog/#breaking-changes","title":"Breaking Changes:","text":"<ul> <li>Database structure has been reformatted. Please ensure your data is backed up! After upgrading to <code>v2.7.1</code>, please run <code>python update.py -m</code> for the migration.</li> </ul> <p>Full Changelog: v2.7.0 to v2.7.1</p>"},{"location":"bot/changelog/#2.7.0","title":"2.7.0 April 10, 2025","text":""},{"location":"bot/changelog/#new-features_1","title":"New Features:","text":"<ul> <li>Added no prefix for message command for bot admin. (47fe8a9)</li> <li>Added a lyrics button in the music controller. (ecc6a21)</li> <li>Introduced a request song channel. (0fa1981)</li> <li>Integrated Lrclib for lyrics support. (820214d)</li> <li>Implemented a YouTube rate limiter. (f7a40b9)</li> <li>Enabled a reconnect feature for the player after the bot is restarted in the debug panel. (7e8bfb6)</li> <li>Simplified installation on any device using Docker Compose. (7b45a06)</li> <li>Expanded the IPC client with more APIs for the dashboard. (bb5e870)</li> <li>Replace internal spotify with Lavalink. (8c23e52)</li> <li>Enhanced error messaging to provide clearer visibility for users.</li> <li>Updated various requirement libraries to their latest versions.</li> </ul>"},{"location":"bot/changelog/#fixed","title":"Fixed:","text":"<ul> <li>Refactored the IPC client payload. (1bf3f40)</li> <li>Improved the IPC connection handler. 237b14c</li> <li>Resolved the syntaxes error in Python 3.11. (2838065)</li> <li>Corrected issues in some language packs. (52b4b66)</li> <li>Fixed typographical errors.</li> </ul> <p>Full Changelog: v2.6.9 to v2.7.0</p>"},{"location":"bot/changelog/#2.6.9","title":"2.6.9 Sep 02, 2024","text":""},{"location":"bot/changelog/#new-features_2","title":"New Features:","text":"<ul> <li>Added the ability to specify <code>start</code> and <code>end</code> positions for each song in all play commands. (33ad427)</li> <li>Added voice channel status so others can see what you are playing. (b0ff4fb)</li> <li>Added more customizable placeholders for your music controller and voice channel status. (b0ff4fb)</li> <li>Added a nodes panel to the debug view. (d4cb50a)</li> <li>Added filter selector option in music controller (bddb9a9)</li> <li>Updated bot status for greater customization options. (72cae9b)</li> <li>Implemented a new logging system to enhance our diagnostics. You'll find some new settings related to this in the <code>settings.json</code> file. (4655b6e)</li> <li>Rewritten the <code>IPC Client</code> code for improved performance and readability. (f1123b3)</li> <li>Rewritten the <code>swap</code> and <code>move</code> methods in voicelink and added filters to the music controller. (20bef0e, 9f2e0e5)</li> </ul>"},{"location":"bot/changelog/#fixed_1","title":"Fixed:","text":"<ul> <li>Resolved an issue that was preventing the 24/7 feature from functioning properly. It's now up and running smoothly. (9c478c7)</li> <li>Removed unnecessary requirements, reducing the project's dependencies and improving build efficiency. (47389d6)</li> <li>Fixed no song suggestions when spotify_client is not given (33ad427)</li> <li>Fixed <code>zh-tw</code> localization slash command language pack (7134287)</li> <li>Squashed some bugs to improve the overall performance and stability of our system.</li> </ul>"},{"location":"bot/changelog/#breaking-changes_1","title":"Breaking Changes:","text":"<ul> <li>Merged <code>.env</code> into <code>settings.json</code>, consolidating all configuration settings into a single file. (779ea8b)</li> <li>Updated the time representation in the playlist share object from <code>datetime</code> to <code>float</code>, reducing memory usage and improving performance.</li> <li>Updated bot status settings. Check <code>settings Example.json</code> for more info. (72cae9b)</li> </ul> <p>Full Changelog: v2.6.8a to v2.6.9</p>"},{"location":"bot/changelog/#2.6.8a","title":"2.6.8a July 26, 2024","text":""},{"location":"bot/changelog/#new-features_3","title":"New Features:","text":"<ul> <li>Added docker configuration for dashboard</li> <li>Updated README</li> <li>Fixed all instances of typo</li> </ul> <p>Full Changelog: v2.6.8 to v2.6.8a</p>"},{"location":"bot/changelog/#2.6.8","title":"2.6.8 February 27, 2024","text":""},{"location":"bot/changelog/#new-features_4","title":"New Features:","text":"<ul> <li>Updated Language Packs: We've refreshed the UA (Ukrainian) and RU (Russian) language packs.</li> <li>Rewritten Placeholder Code: We've introduced new placeholders, <code>track_author</code> and <code>track_color</code>, for more customization.</li> <li>Dockerfile and Docker-compose: We've simplified installation with Docker and included MongoDB in the docker-compose setup.</li> <li>Improved Database Performance: We've switched to <code>motor</code> for faster MongoDB interactions.</li> <li>Command Changes: We've removed the <code>chapters command</code> and added <code>autocomplete</code> in the play command, which now searches with the <code>Spotify API</code> for more efficient and accurate searches.</li> <li>Disable Button Text Option: We've added a disable button text option in <code>settings.json</code>, allowing you to customize the disable controller button text as per your preference.</li> <li>Embed View Change: We've changed the embed view in the <code>/playlist view</code> command for a better user experience.</li> <li>More Typehints: We've added more typehints into the code to make it more understandable and easier to work with.</li> <li>Python 3.12 Support: Vocard now supports <code>Python 3.12</code>.</li> <li>Track URLs: We've added track URLs and redesigned the queue, history, and playlist command views.</li> <li>Played History Feature: We've added a new played history feature to keep track of your tunes.</li> <li>Code Optimizations: We've made several code optimizations to improve the bot's performance.</li> <li>Fixed MP3 URLs: You can now play songs with <code>custom MP3 URLs</code>.</li> <li>New Lyrics Search Platform: We've added a new search lyrics platform, <code>Lyrist</code>, and rewritten the lyrics command. You can now enter the <code>song title</code> and the <code>song author</code> for better searching.</li> <li>Rewritten Placeholder Expression Features: Placeholder expressions have been rewritten for faster execution and more comprehensive actions in the player controller.</li> </ul>"},{"location":"bot/changelog/#breaking-changes_2","title":"Breaking Changes:","text":"<ul> <li>Collection Name Change: Please note that the collection name Playlist will be changed to Users. This is a significant change and might affect how you interact with the bot.</li> <li>Sources Settings Update: More information (color code) has been added into the \"sources_settings\" field in the settings.json.</li> </ul> <p>Full Changelog: v2.6.7 to v2.6.8</p>"},{"location":"bot/changelog/#2.6.7","title":"2.6.7 December 15, 2023","text":""},{"location":"bot/changelog/#new-features_5","title":"New Features:","text":"<ul> <li>Only supported for <code>Lavalink v4.0.0</code> or above</li> <li>Added thumbnail in nowplaying embed</li> <li>Added UA language pack</li> <li>Added helpful guide embed when your command was missing arguments</li> <li>Dump discord.py package update (2.3.1 -&gt; 2.3.2)</li> <li>Fixed seek function in dashboard</li> <li>Fixed playlist playback fix</li> <li>Code clean-up and performance improvement</li> <li>Rewrite debugging command</li> </ul> <p>Full Changelog: v2.6.6 to v2.6.7</p>"},{"location":"bot/config/","title":"Configuration","text":""},{"location":"bot/config/#setting-up-lavalink","title":"Setting up <code>lavalink</code>","text":"<p>Note</p> <p>Lavalink is essential for processing and streaming audio to Discord. Without a Lavalink server, you won't be able to play music on Vocard. You can either host your own server or use a public Lavalink server from this [Public Lavalink Website].</p> <ul> <li>Vocard requires Lavalink v4 or higher.</li> <li>For detailed steps on installing Lavalink, visit the [Lavalink Official Website].</li> <li>To enable YouTube and advanced audio source support (e.g., Spotify, Apple Music), you must install the following plugins:<ul> <li>YouTube Source Plugin: lavalink-devs/youtube-source</li> <li>LavaSrc Plugin: topi314/LavaSrc</li> </ul> </li> </ul>"},{"location":"bot/config/#required-plugins","title":"Required Plugins","text":"<p>To use Vocard with YouTube and other audio sources, configure your Lavalink server to include the YouTube Source and LavaSrc plugins. Add the following to your <code>application.yml</code> file under the <code>lavalink.plugins</code> section:</p> <p><pre><code>lavalink:\n  plugins:\n    - dependency: \"dev.lavalink.youtube:youtube-plugin:1.11.4\"  # Check latest version at https://github.com/lavalink-devs/youtube-source/releases\n      snapshot: false\n    - dependency: \"com.github.topi314.lavasrc:lavasrc-plugin:4.4.1\"  # Check latest version at https://github.com/topi314/LavaSrc/releases\n      snapshot: false\n</code></pre> For a complete and pre-configured <code>application.yml</code> template, refer to the example provided in the Vocard repository.</p>"},{"location":"bot/config/#settings-up-settingsjson","title":"Settings up <code>settings.json</code>","text":"<p>Rename <code>settings Example.json</code> to <code>settings.json</code> and customize your settings.</p> <p>Note</p> <p>If you are using Genius as your lyrics search engine, you must install the lyricsgenius module <code>(pip install lyricsgenius)</code></p> Latestv2.6.9v2.6.8v2.6.7 settings.json<pre><code>{\n    \"token\": \"YOUR_BOT_TOKEN\", # (1)\n    \"client_id\": \"YOUR_BOT_CLIENT_ID\", # (2)\n    \"genius_token\": \"YOUR_GENIUS_TOKEN\", # (4)\n    \"mongodb_url\": \"YOUR_MONGODB_URL\", # (5)\n    \"mongodb_name\": \"YOUR_MONGODB_DB_NAME\",\n    \"nodes\": { # (6)\n        \"DEFAULT\": {\n            \"host\": \"lavalink\",\n            \"port\": 2333,\n            \"password\": \"youshallnotpass\",\n            \"secure\": false,\n            \"identifier\": \"DEFAULT\",\n            \"yt_ratelimit\": {\n                \"tokens\": [],\n                \"config\": {\n                    \"retry_time\": 10800,\n                    \"max_requests\": 30\n                },\n                \"strategy\": \"LoadBalance\"\n            }\n        }   \n    },\n    \"prefix\": \"?\", # (7)\n    \"activity\": [ # (8)\n        {\"type\": \"listening\", \"name\": \"/help\", \"status\": \"online\"}\n    ],\n    \"logging\": { # (9)\n        \"file\": {\n            \"path\": \"./logs\",\n            \"enable\": true\n        },\n        \"level\": {\n            \"discord\": \"INFO\",\n            \"vocard\": \"INFO\",\n            \"ipc_client\": \"INFO\"\n        },\n        \"max-history\": 30\n    },\n    \"bot_access_user\": [], # (10)\n    \"embed_color\":\"0xb3b3b3\", # (11)\n    \"default_max_queue\": 1000, # (12)\n    \"lyrics_platform\": \"lyrist\", # (13)\n    \"ipc_client\": { # (14)\n        \"host\": \"127.0.0.1\",\n        \"port\": 8000,\n        \"password\": \"YOUR_PASSWORD\",\n        \"secure\": false,\n        \"enable\": false\n    },\n    \"sources_settings\": { # (15)\n        \"youtube\": {\n            \"emoji\": \"&lt;:youtube:826661982760992778&gt;\",\n            \"color\": \"0xFF0000\"\n        },\n        \"youtubemusic\": {\n            \"emoji\": \"&lt;:youtube:826661982760992778&gt;\",\n            \"color\": \"0xFF0000\"\n        },\n        \"spotify\": {\n            \"emoji\": \"&lt;:spotify:826661996615172146&gt;\",\n            \"color\": \"0x1DB954\"\n        },\n        \"soundcloud\": {\n            \"emoji\": \"&lt;:soundcloud:852729280027033632&gt;\",\n            \"color\": \"0xFF7700\"\n        },\n        \"twitch\": {\n            \"emoji\": \"&lt;:twitch:852729278285086741&gt;\",\n            \"color\": \"0x9B4AFF\"\n        },\n        \"bandcamp\": {\n            \"emoji\": \"&lt;:bandcamp:864694003811221526&gt;\",\n            \"color\": \"0x6F98A7\"\n        },\n        \"vimeo\": {\n            \"emoji\": \"&lt;:vimeo:864694001919721473&gt;\",\n            \"color\": \"0x1ABCEA\"\n        },\n        \"applemusic\": {\n            \"emoji\": \"&lt;:applemusic:994844332374884413&gt;\",\n            \"color\": \"0xE298C4\"\n        },\n        \"reddit\": {\n            \"emoji\": \"&lt;:reddit:996007566863773717&gt;\",\n            \"color\": \"0xFF5700\"\n        },\n        \"tiktok\": {\n            \"emoji\": \"&lt;:tiktok:996007689798811698&gt;\",\n            \"color\": \"0x74ECE9\"\n        },\n        \"others\": {\n            \"emoji\": \"\ud83d\udd17\",\n            \"color\": \"0xb3b3b3\"\n        }\n    },\n    \"default_controller\": { # (16)\n        \"embeds\": {\n            \"active\": {\n                \"description\": \"**Now Playing: ```[@@track_name@@]```\\nLink: [Click Me](@@track_url@@) | Requester: @@track_requester_mention@@ | DJ: @@dj@@**\",\n                \"footer\": {\n                    \"text\": \"Queue Length: @@queue_length@@ | Duration: @@track_duration@@ | Volume: @@volume@@% {{loop_mode != 'Off' ?? | Repeat: @@loop_mode@@}}\"\n                },\n                \"image\": \"@@track_thumbnail@@\",\n                \"author\": {\n                    \"name\": \"Music Controller | @@channel_name@@\",\n                    \"icon_url\": \"@@bot_icon@@\"\n                },\n                \"color\": \"@@track_color@@\"\n            },\n            \"inactive\": {\n                \"title\": {\n                    \"name\": \"There are no songs playing right now\"\n                },\n                \"description\": \"[Support](@@server_invite_link@@) | [Invite](@@invite_link@@) | [Questionnaire](https://forms.gle/Qm8vjBfg2kp13YGD7)\",\n                \"image\": \"https://i.imgur.com/dIFBwU7.png\",\n                \"color\": \"@@default_embed_color@@\"\n            }\n        },\n        \"default_buttons\": [\n            [\"back\", \"resume\", \"skip\", {\"stop\": \"red\"}, \"add\"],\n            [\"tracks\"]\n        ],\n        \"disableButtonText\": false # (17)\n    },\n    \"default_voice_status_template\": \"{{@@track_name@@ != 'None' ?? @@track_source_emoji@@ Now Playing: @@track_name@@ // Waiting for song requests}}\", # (18)\n    \"cooldowns\": { # (19)\n        \"connect\": [2, 30],\n        \"playlist view\": [1, 30]\n    },\n    \"aliases\": { # (20)\n        \"connect\": [\"join\"],\n        \"leave\": [\"stop\", \"bye\"],\n        \"play\": [\"p\"],\n        \"view\": [\"v\"]\n    }\n}\n</code></pre> <ol> <li>Your Discord bot token. You can get it on Discord Portal</li> <li>(Optional) Your Discord bot client ID. You can get it on Discord Portal</li> <li>Your Spoity client ID and client secret ID. You can get it on Spotify Portal</li> <li>Your genius api token. You can get it on Genius Lyrics API</li> <li>Your Mongo datebase url and name. You can create MongoDB on MongoDB</li> <li>Lavalink Server that Vocard will connected! You have to provide host, port, password and identifier of the server.</li> <li>You can set the prefix of the bot. If you don't provide any prefix, the bot will disable the message command.</li> <li>You can set the activity status of the bot. You can look at some example here.</li> <li>You can configure the logging settings, including the log file path, the logging level for each library, and the maximum history duration for the logs in days.</li> <li>By providing the Discord user ID, you can grant these users access to all administrative commands. This will allow them to bypass any limitations imposed on the commands. <code>Example: [123456789012345678, 876543210987654321, ...]</code></li> <li>You must pass a Hexadecimal color code and add <code>0x</code> before the color code. <code>Example: 0xb3b3b3</code></li> <li>You can set a default maximum number of tracks that can be added to the queue.</li> <li>You can set lyrics search engine. <code>(e.g. A_ZLyrics, Genius, Lyrist, Lrclib)</code></li> <li>You can configure the host, password, and enable the IPC client to connect to your Vocard dashboard.</li> <li>You can change the source emoji of the track with discord emoji like <code>&lt;:EMOJI_NAME:EMOJI_ID&gt;</code> and change the color of the source in Hexadecimal color.</li> <li>You can create your custom embeds and buttons in the player controller. Example Here</li> <li>You can disable the text on the button in the player controller, if you set <code>true</code>.</li> <li>You can set a default voice channel status template while music is playing. Explore available placeholders here.</li> <li>You can set a custom cooldown for the command. <code>Example: \"command_name\": [The total number of tokens available, The length of the cooldown period in seconds]</code></li> <li>You can set custom aliases in the command. <code>Example: \"command_name\": [alias1, alias2, ...]</code></li> </ol> settings.json<pre><code>{\n    \"token\": \"YOUR_BOT_TOKEN\", # (1)\n    \"client_id\": \"YOUR_BOT_CLIENT_ID\", # (2)\n    \"spotify_client_id\": \"YOUR_SPOTIFY_CLIENT_ID\", # (3)\n    \"spotify_client_secret\": \"YOUR_SPOTIFY_CLIENT_SECRET\",\n    \"genius_token\": \"YOUR_GENIUS_TOKEN\", # (4)\n    \"mongodb_url\": \"YOUR_MONGODB_URL\", # (5)\n    \"mongodb_name\": \"YOUR_MONGODB_DB_NAME\",\n    \"nodes\": { # (6)\n        \"DEFAULT\": {\n            \"host\": \"lavalink\",\n            \"port\": 2333,\n            \"password\": \"youshallnotpass\",\n            \"secure\": false,\n            \"identifier\": \"DEFAULT\"\n        }   \n    },\n    \"prefix\": \"?\", # (7)\n    \"activity\": [ # (8)\n        {\"type\": \"listening\", \"name\": \"/help\", \"status\": \"online\"}\n    ],\n    \"logging\": { # (9)\n        \"file\": {\n            \"path\": \"./logs\",\n            \"enable\": true\n        },\n        \"level\": {\n            \"discord\": \"INFO\",\n            \"vocard\": \"INFO\",\n            \"ipc_client\": \"INFO\"\n        },\n        \"max-history\": 30\n    },\n    \"bot_access_user\": [], # (10)\n    \"embed_color\":\"0xb3b3b3\", # (11)\n    \"default_max_queue\": 1000, # (12)\n    \"lyrics_platform\": \"lyrist\", # (13)\n    \"ipc_client\": { # (14)\n        \"host\": \"127.0.0.1\",\n        \"port\": 8000,\n        \"password\": \"YOUR_PASSWORD\",\n        \"secure\": false,\n        \"enable\": false\n    },\n    \"sources_settings\": { # (15)\n        \"youtube\": {\n            \"emoji\": \"&lt;:youtube:826661982760992778&gt;\",\n            \"color\": \"0xFF0000\"\n        },\n        \"youtube music\": {\n            \"emoji\": \"&lt;:youtube:826661982760992778&gt;\",\n            \"color\": \"0xFF0000\"\n        },\n        \"spotify\": {\n            \"emoji\": \"&lt;:spotify:826661996615172146&gt;\",\n            \"color\": \"0x1DB954\"\n        },\n        \"soundcloud\": {\n            \"emoji\": \"&lt;:soundcloud:852729280027033632&gt;\",\n            \"color\": \"0xFF7700\"\n        },\n        \"twitch\": {\n            \"emoji\": \"&lt;:twitch:852729278285086741&gt;\",\n            \"color\": \"0x9B4AFF\"\n        },\n        \"bandcamp\": {\n            \"emoji\": \"&lt;:bandcamp:864694003811221526&gt;\",\n            \"color\": \"0x6F98A7\"\n        },\n        \"vimeo\": {\n            \"emoji\": \"&lt;:vimeo:864694001919721473&gt;\",\n            \"color\": \"0x1ABCEA\"\n        },\n        \"apple\": {\n            \"emoji\": \"&lt;:applemusic:994844332374884413&gt;\",\n            \"color\": \"0xE298C4\"\n        },\n        \"reddit\": {\n            \"emoji\": \"&lt;:reddit:996007566863773717&gt;\",\n            \"color\": \"0xFF5700\"\n        },\n        \"tiktok\": {\n            \"emoji\": \"&lt;:tiktok:996007689798811698&gt;\",\n            \"color\": \"0x74ECE9\"\n        }\n    },\n    \"default_controller\": { # (16)\n        \"embeds\": {\n            \"active\": {\n                \"description\": \"**Now Playing: ```[@@track_name@@]```\\nLink: [Click Me](@@track_url@@) | Requester: @@requester@@ | DJ: @@dj@@**\",\n                \"footer\": {\n                    \"text\": \"Queue Length: @@queue_length@@ | Duration: @@track_duration@@ | Volume: @@volume@@% {{loop_mode != 'Off' ?? | Repeat: @@loop_mode@@}}\"\n                },\n                \"image\": \"@@track_thumbnail@@\",\n                \"author\": {\n                    \"name\": \"Music Controller | @@channel_name@@\",\n                    \"icon_url\": \"@@bot_icon@@\"\n                },\n                \"color\": \"@@track_color@@\"\n            },\n            \"inactive\": {\n                \"title\": {\n                    \"name\": \"There are no songs playing right now\"\n                },\n                \"description\": \"[Support](@@server_invite_link@@) | [Invite](@@invite_link@@) | [Questionnaire](https://forms.gle/Qm8vjBfg2kp13YGD7)\",\n                \"image\": \"https://i.imgur.com/dIFBwU7.png\",\n                \"color\": \"@@default_embed_color@@\"\n            }\n        },\n        \"default_buttons\": [\n            [\"back\", \"resume\", \"skip\", {\"stop\": \"red\"}, \"add\"],\n            [\"tracks\"]\n        ],\n        \"disableButtonText\": false # (17)\n    },\n    \"default_voice_status_template\": \"{{@@track_name@@ != 'None' ?? @@track_source_emoji@@ Now Playing: @@track_name@@ // Waiting for song requests}}\", # (18)\n    \"cooldowns\": { # (19)\n        \"connect\": [2, 30],\n        \"playlist view\": [1, 30]\n    },\n    \"aliases\": { # (20)\n        \"connect\": [\"join\"],\n        \"leave\": [\"stop\", \"bye\"],\n        \"play\": [\"p\"],\n        \"view\": [\"v\"]\n    }\n}\n</code></pre> <ol> <li>Your Discord bot token. You can get it on Discord Portal</li> <li>(Optional) Your Discord bot client ID. You can get it on Discord Portal</li> <li>Your Spoity client ID and client secret ID. You can get it on Spotify Portal</li> <li>Your genius api token. You can get it on Genius Lyrics API</li> <li>Your Mongo datebase url and name. You can create MongoDB on MongoDB</li> <li>Lavalink Server that Vocard will connected! You have to provide host, port, password and identifier of the server.</li> <li>You can set the prefix of the bot. If you don't provide any prefix, the bot will disable the message command.</li> <li>You can set the activity status of the bot. You can look at some example here.</li> <li>You can configure the logging settings, including the log file path, the logging level for each library, and the maximum history duration for the logs in days.</li> <li>By providing the Discord user ID, you can grant these users access to all administrative commands. This will allow them to bypass any limitations imposed on the commands. <code>Example: [123456789012345678, 876543210987654321, ...]</code></li> <li>You must pass a Hexadecimal color code and add <code>0x</code> before the color code. <code>Example: 0xb3b3b3</code></li> <li>You can set a default maximum number of tracks that can be added to the queue.</li> <li>You can set lyrics search engine. <code>(e.g. A_ZLyrics, Genius, lyrist)</code></li> <li>You can configure the host, password, and enable the IPC client to connect to your Vocard dashboard.</li> <li>You can change the source emoji of the track with discord emoji like <code>&lt;:EMOJI_NAME:EMOJI_ID&gt;</code> and change the color of the source in Hexadecimal color.</li> <li>You can create your custom embeds and buttons in the player controller. Example Here</li> <li>You can disable the text on the button in the player controller, if you set <code>true</code>.</li> <li>You can set a default voice channel status template while music is playing. Explore available placeholders here.</li> <li>You can set a custom cooldown for the command. <code>Example: \"command_name\": [The total number of tokens available, The length of the cooldown period in seconds]</code></li> <li>You can set custom aliases in the command. <code>Example: \"command_name\": [alias1, alias2, ...]</code></li> </ol> settings.json<pre><code>{\n    \"nodes\": { # (1)\n        \"DEFAULT\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 2333,\n            \"password\": \"password\",\n            \"secure\": false,\n            \"identifier\": \"DEFAULT\"\n        }   \n    },\n    \"prefix\": \"?\", # (2)\n    \"activity\":[\n        {\"listen\": \"/help\"} # (3)\n    ],\n    \"bot_access_user\": [], # (4)\n    \"embed_color\":\"0xb3b3b3\", # (5)\n    \"default_max_queue\": 1000, # (6)\n    \"lyrics_platform\": \"A_ZLyrics\", # (7)\n    \"ipc_server\": { # (8)\n        \"host\": \"127.0.0.1\",\n        \"port\": 8000,\n        \"enable\": false\n    },\n    \"sources_settings\": { # (9)\n        \"youtube\": {\n            \"emoji\": \"&lt;:youtube:826661982760992778&gt;\",\n            \"color\": \"0xFF0000\"\n        },\n        \"youtube music\": {\n            \"emoji\": \"&lt;:youtube:826661982760992778&gt;\",\n            \"color\": \"0xFF0000\"\n        },\n        \"spotify\": {\n            \"emoji\": \"&lt;:spotify:826661996615172146&gt;\",\n            \"color\": \"0x1DB954\"\n        },\n        \"soundcloud\": {\n            \"emoji\": \"&lt;:soundcloud:852729280027033632&gt;\",\n            \"color\": \"0xFF7700\"\n        },\n        \"twitch\": {\n            \"emoji\": \"&lt;:twitch:852729278285086741&gt;\",\n            \"color\": \"0x9B4AFF\"\n        },\n        \"bandcamp\": {\n            \"emoji\": \"&lt;:bandcamp:864694003811221526&gt;\",\n            \"color\": \"0x6F98A7\"\n        },\n        \"vimeo\": {\n            \"emoji\": \"&lt;:vimeo:864694001919721473&gt;\",\n            \"color\": \"0x1ABCEA\"\n        },\n        \"apple\": {\n            \"emoji\": \"&lt;:applemusic:994844332374884413&gt;\",\n            \"color\": \"0xE298C4\"\n        },\n        \"reddit\": {\n            \"emoji\": \"&lt;:reddit:996007566863773717&gt;\",\n            \"color\": \"0xFF5700\"\n        },\n        \"tiktok\": {\n            \"emoji\": \"&lt;:tiktok:996007689798811698&gt;\",\n            \"color\": \"0x74ECE9\"\n        }\n    },\n    \"default_controller\": { # (10)\n        \"embeds\": {\n            \"active\": {\n                \"description\": \"**Now Playing: ```[@@track_name@@]```\\nLink: [Click Me](@@track_url@@) | Requester: @@requester@@ | DJ: @@dj@@**\",\n                \"footer\": {\n                    \"text\": \"Queue Length: @@queue_length@@ | Duration: @@track_duration@@ | Volume: @@volume@@% {{loop_mode != 'Off' ?? | Repeat: @@loop_mode@@}}\"\n                },\n                \"image\": \"@@track_thumbnail@@\",\n                \"author\": {\n                    \"name\": \"Music Controller | @@channel_name@@\",\n                    \"icon_url\": \"@@bot_icon@@\"\n                },\n                \"color\": \"@@track_color@@\"\n            },\n            \"inactive\": {\n                \"title\": {\n                    \"name\": \"There are no songs playing right now\"\n                },\n                \"description\": \"[Support](@@server_invite_link@@) | [Invite](@@invite_link@@) | [Questionnaire](https://forms.gle/Qm8vjBfg2kp13YGD7)\",\n                \"image\": \"https://i.imgur.com/dIFBwU7.png\",\n                \"color\": \"@@default_embed_color@@\"\n            }\n        },\n        \"default_buttons\": [\n            [\"back\", \"resume\", \"skip\", {\"stop\": \"red\"}, \"add\"],\n            [\"tracks\"]\n        ],\n        \"disableButtonText\": false  # (11)\n    },\n    \"cooldowns\": { # (12)\n        \"connect\": [2, 30],\n        \"playlist view\": [1, 30]\n    },\n    \"aliases\": { # (13)\n        \"connect\": [\"join\"],\n        \"leave\": [\"stop\", \"bye\"],\n        \"play\": [\"p\"],\n        \"view\": [\"v\"]\n    }\n}\n</code></pre> <ol> <li>Lavalink Server that Vocard will connected! You have to provide host, port, password and identifier of the server.</li> <li>You can set the prefix of the bot. If you don't provide any prefix, the bot will disable the message command.</li> <li>You can set the activity status of the bot. You can look at some example here.</li> <li>By providing the Discord user ID, you can grant these users access to all administrative commands. This will allow them to bypass any limitations imposed on the commands. <code>Example: [123456789012345678, 876543210987654321, ...]</code></li> <li>You must pass a Hexadecimal color code and add <code>0x</code> before the color code. <code>Example: 0xb3b3b3</code></li> <li>You can set a default maximum number of tracks that can be added to the queue.</li> <li>You can set lyrics search engine. <code>(e.g. A_ZLyrics, Genius, lyrist)</code></li> <li>You can set the host, password and enable of the ipc server.</li> <li>You can change the source emoji of the track with discord emoji like <code>&lt;:EMOJI_NAME:EMOJI_ID&gt;</code> and change the color of the source in Hexadecimal color.</li> <li>You can create your custom embeds and buttons in the player controller. Example Here</li> <li>You can disable the text on the button in the player controller, if you set <code>true</code>.</li> <li>You can set a custom cooldown for the command. <code>Example: \"command_name\": [The total number of tokens available, The length of the cooldown period in seconds]</code></li> <li>You can set custom aliases in the command. <code>Example: \"command_name\": [alias1, alias2, ...]</code></li> </ol> settings.json<pre><code>{\n    \"nodes\": { # (1)\n        \"DEFAULT\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 2333,\n            \"password\": \"password\",\n            \"secure\": false,\n            \"identifier\": \"DEFAULT\"\n        }   \n    },\n    \"prefix\": \"?\", # (2)\n    \"activity\":[ # (3)\n        {\"listen\": \"/help\"}\n    ],\n    \"bot_access_user\": [], # (4)\n    \"embed_color\":\"0xb3b3b3\", # (5)\n    \"default_max_queue\": 1000, # (6)\n    \"lyrics_platform\": \"A_ZLyrics\", # (7)\n    \"ipc_server\": { # (8)\n        \"host\": \"127.0.0.1\",\n        \"port\": 8000,\n        \"enable\": false\n    },\n    \"emoji_source_raw\": { # (9)\n        \"youtube\": \"&lt;:youtube:826661982760992778&gt;\",\n        \"youtube music\": \"&lt;:youtube:826661982760992778&gt;\",\n        \"spotify\": \"&lt;:spotify:826661996615172146&gt;\",\n        \"soundcloud\": \"&lt;:soundcloud:852729280027033632&gt;\",\n        \"twitch\": \"&lt;:twitch:852729278285086741&gt;\",\n        \"bandcamp\": \"&lt;:bandcamp:864694003811221526&gt;\",\n        \"vimeo\": \"&lt;:vimeo:864694001919721473&gt;\",\n        \"apple\": \"&lt;:applemusic:994844332374884413&gt;\",\n        \"reddit\": \"&lt;:reddit:996007566863773717&gt;\",\n        \"tiktok\": \"&lt;:tiktok:996007689798811698&gt;\"\n    },\n    \"default_controller\": { # (10)\n        \"embeds\": {\n            \"active\": {\n                \"description\": \"**Now Playing: ```[@@track_name@@]```\\nLink: [Click Me](@@track_url@@) | Requester: @@requester@@ | DJ: @@dj@@**\",\n                \"footer\": {\n                    \"text\": \"Queue Length: @@queue_length@@ | Duration: @@duration@@ | Volume: @@volume@@% {{loop_mode!=Off ?? | Repeat: @@loop_mode@@}}\"\n                },\n                \"image\": \"@@track_thumbnail@@\",\n                \"author\": {\n                    \"name\": \"Music Controller | @@channel_name@@\",\n                    \"icon_url\": \"@@bot_icon@@\"\n                },\n                \"color\": \"@@default_embed_color@@\"\n            },\n            \"inactive\": {\n                \"title\": {\n                    \"name\": \"There are no songs playing right now\"\n                },\n                \"description\": \"[Support](@@server_invite_link@@) | [Invite](@@invite_link@@) | [Questionnaire](https://forms.gle/Qm8vjBfg2kp13YGD7)\",\n                \"image\": \"https://i.imgur.com/dIFBwU7.png\",\n                \"color\": \"@@default_embed_color@@\"\n            }\n        },\n        \"default_buttons\": [\n            [\"back\", \"resume\", \"skip\", {\"stop\": \"red\"}, \"add\"],\n            [\"tracks\"]\n        ]\n    },\n    \"cooldowns\": { # (11)\n        \"connect\": [2, 30],\n        \"playlist view\": [1, 30]\n    },\n    \"aliases\": { # (12)\n        \"connect\": [\"join\"],\n        \"leave\": [\"stop\", \"bye\"],\n        \"play\": [\"p\"],\n        \"view\": [\"v\"]\n    }\n}\n</code></pre> <ol> <li>Lavalink Server that Vocard will connected! You have to provide host, port, password and identifier of the server.</li> <li>You can set the prefix of the bot. If you don't provide any prefix, the bot will disable the message command.</li> <li>You can set the activity status of the bot. You can look at some example here.</li> <li>By providing the Discord user ID, you can grant these users access to all administrative commands. This will allow them to bypass any limitations imposed on the commands. <code>Example: [123456789012345678, 876543210987654321, ...]</code></li> <li>You must pass a Hexadecimal color code and add <code>0x</code> before the color code. <code>Example: 0xb3b3b3</code></li> <li>You can set a default maximum number of tracks that can be added to the queue.</li> <li>You can set lyrics search engine. <code>(e.g. A_ZLyrics, Genius)</code></li> <li>You can set the host, password and enable of the ipc server.</li> <li>You can change the source emoji of the track with discord emoji like <code>&lt;:EMOJI_NAME:EMOJI_ID&gt;</code>.</li> <li>You can create your custom embeds and buttons in the player controller. Example Here</li> <li>You can set a custom cooldown for the command. <code>Example: \"command_name\": [The total number of tokens available, The length of the cooldown period in seconds]</code></li> <li>You can set custom aliases in the command. <code>Example: \"command_name\": [alias1, alias2, ...]</code></li> </ol>"},{"location":"bot/config/bot-activity/","title":"Bot Activity","text":""},{"location":"bot/config/bot-activity/#bot-activity_1","title":"Bot Activity","text":"<p>Note</p> <p>The activity status will be updated every 10 minutes. If your bot has multiple activities, it will switch to a different activity every 10 minutes.</p> Usage<pre><code>{\n    \"type\": \"@@action@@\",\n    \"name\": \"@@value@@ some text ...\",\n    \"status\": \"online\"\n}\n</code></pre> Action Name Description playing Display the playing status. listening Display the listening status. watching Display the watching status. streaming Display the streaming status. Value Name Description guilds Number of guilds in the bot. users Number of users in the voice channel. players Number of players playing. nodes Number of nodes are connected. Status Description online The bot is online. offline The bot is offline. idle The bot is idle. dnd The bot is \u201cDo Not Disturb\u201d. invisible The bot is \u201cinvisible\u201d. Example (Single Activity)Example (Multiple Activity) <p> settings.json<pre><code>\"activity\":[\n    {\"type\": \"listening\", \"name\": \"/help\", \"status\": \"online\"}\n]\n</code></pre></p> <p> settings.json<pre><code>\"activity\":[\n    {\"type\": \"listening\", \"name\": \"/help\", \"status\": \"online\"}\n    {\"type\": \"listening\", \"name\": \"@@guilds@@ Guilds\", \"status\": \"online\"}\n    {\"type\": \"watching\", \"name\": \"@@players@@ Players\", \"status\": \"idle\"}\n]\n</code></pre></p>"},{"location":"bot/config/controller/","title":"Controller","text":"<p>You can create a custom embed and button for the Music Controller in Vocard for each guild. This Music Controller displays the current playback status, including details like whether a track is looping and the number of songs in the queue. Additionally, the controller buttons allow you to perform actions such as pause, skip, forward, rewind, and go back, eliminating the need to type commands.</p>"},{"location":"bot/config/controller/#music-controller","title":"Music Controller","text":""},{"location":"bot/config/controller/#embeds","title":"Embeds","text":"Usage Of PlaceholderUsage Of Expression <pre><code>@@value@@\n</code></pre> <pre><code>{{ EXPRESSION ?? TRUE // FALSE }}\n</code></pre> Value Name Description channel_name The name of the channel the bot is playing on. track_name The name of the track currently playing. track_url The url of the track currently playing. track_author The name of the author of the track currently playing. track_duration The length of the track currently playing. track_thumbnail The thumbnail of the track currently playing. track_color The color associated with the source for the currently playing track. For example, YouTube tracks are indicated in red. This color can be customized in the settings.json file track_requester_id The id of the requester for the currently playing track. track_requester_name The name of the requester for the currently playing track. track_requester_mention The mention of the requester for the currently playing track. track_requester_avatar The avatar url of the requester for the currently playing track. track_source_name The name of the source for the currently playing track. track_source_emoji The emoji of the source for the currently playing track. queue_length Number of queue lengths volume Music volume. dj DJ role. <code>(It can be a user or role)</code> loop_mode Current repeat mode. default_embed_color Default embed color. <code>(color_code in settings.json)</code> bot_icon The avatar of the bot. server_invite_link The invite url of the support server invite_link The invite url of the bot. Example 1 <p> settings.json<pre><code>\"default_controller\": {\n    \"embeds\": {\n        \"active\": {\n            \"description\": \"**Now Playing: ```[@@track_name@@]```\\nLink: [Click Me](@@track_url@@) | Requester: @@track_requester_mention@@ | DJ: @@dj@@**\",\n            \"footer\": {\n                \"text\": \"Queue Length: @@queue_length@@ | Duration: @@track_duration@@ | Volume: @@volume@@% {{loop_mode != 'Off' ?? | Repeat: @@loop_mode@@}}\"\n            },\n            \"image\": \"@@track_thumbnail@@\",\n            \"author\": {\n                \"name\": \"Music Controller | @@channel_name@@\",\n                \"icon_url\": \"@@bot_icon@@\"\n            },\n            \"color\": \"@@track_color@@\"\n        },\n        \"inactive\": {\n            \"title\": {\n                \"name\": \"There are no songs playing right now\"\n            },\n            \"description\": \"[Support](@@server_invite_link@@) | [Invite](@@invite_link@@) | [Questionnaire](https://forms.gle/Qm8vjBfg2kp13YGD7)\",\n            \"image\": \"https://i.imgur.com/dIFBwU7.png\",\n            \"color\": \"@@default_embed_color@@\"\n        }\n    }\n},\n</code></pre></p>"},{"location":"bot/config/controller/#buttons","title":"Buttons","text":"UsageUsage (Button with color) <pre><code>[button_name]\n</code></pre> <pre><code>[{\"button\": \"color\"}]\n</code></pre> Color Name Description Grey Color the button grey. Red Color the button red. Blue Color the button blue. Green Color the button green. Button Name Description Back Skips back to the previous song. Resume Resume or pause the music. Skip Skips to the next song. Stop Disconnects the bot from your voice channel and chears the queue. Loop Changes Loop mode. <code>[Off, Track, Queue]</code> Add Add the playing track in to your default custom playlist. VolumeUp Increase player volume by 20%. VolumeDown Decrease player volume by 20%. VolumeMute Mute or unmute the player. Autoplay Enable or disable autoplay mode. Shuffle Randomizes the tracks in the queue. Forward Forward 30 seconds in the current track. Rewind Rewind 30 seconds in the current track. Lyrics Show the lyrics of the current track in an embedded message. Tracks If there are tracks in the queue, a drop-down list will be appear. Up to 10 tracks. <code>(This will take one row)</code> Effects Displays all available audio effects that can be applied to the current song. <code>(This will take one row)</code> Example 1Example 2Example 3 settings.json<pre><code>\"default_buttons\": [\n    [\"back\", \"resume\", \"skip\", {\"stop\": \"red\"}, \"add\"],\n    [\"tracks\"]\n]\n</code></pre> settings.json<pre><code>\"default_buttons\": [\n    [\"back\", \"resume\", \"skip\", {\"stop\": \"red\"}, {\"add\": \"green\"}],\n    [{\"loop\": \"green\"}, {\"volumeup\": \"blue\"}, {\"volumedown\": \"blue\"}, {\"volumemute\": \"red\"}],\n    [\"tracks\"]\n]\n</code></pre> settings.json<pre><code>\"default_buttons\": [\n    [\"autoplay\", \"shuffle\", {\"loop\": \"green\"}, \"add\"],\n    [\"back\", \"resume\", \"skip\", {\"stop\": \"red\"}],\n    [\"volumeup\", \"volumedown\", {\"mute\": \"red\"}]\n]\n</code></pre>"},{"location":"bot/config/how-to-upgrade/","title":"How to upgrade","text":"<p>Warning</p> <p>Please note that the bot directory does not contain any personal  files before running the update command. Any such files will be deleted upon execution.</p> <p>Check the current version</p> <pre><code>python update.py -c\n</code></pre> <p>Install the latest version</p> <pre><code>python update.py -l\n</code></pre> <p>Install the specified version</p> <pre><code>python update.py -v VERSION\n</code></pre> <p>Install the beta version</p> <pre><code>python update.py -b\n</code></pre> <p>Install the Migration Script</p> <p>To install the migration script (note that this does not include every version), you can review the scripts in the Vocard-Migration repository: <pre><code>python update.py -m\n</code></pre></p>"},{"location":"bot/config/language/","title":"Languages","text":"<p>Vocard provides support for multiple languages, including both Localization slash command languages and standard language packs. Additionally, Vocard allows you to easily customize your own language. Simply follow the steps below.</p>"},{"location":"bot/config/language/#creating-a-standard-language-pack","title":"Creating a Standard Language Pack","text":"<p>To create a new language pack, follow these steps:</p> <p>Note</p> <p>Do not alter or remove variables like <code>{0} {1} ...</code> as they are essential for the bot's functionality.</p> <ol> <li>Go to the <code>langs</code> directory and duplicate the <code>EN.json</code> file.</li> <li>Rename the copied file with the desired language code (e.g., for Korean, use <code>KO.json</code>).</li> <li>Open the copied file and replace the existing text with your translations.</li> <li>Once you've made your changes, restart the bot to apply them.</li> </ol>"},{"location":"bot/config/language/#creating-a-localization-slash-command-language-pack","title":"Creating a Localization Slash Command Language Pack","text":"<p>To create a new localization slash command language pack, follow these steps:</p> <ol> <li>Navigate to the <code>local_langs</code> directory and duplicate the <code>zh-TW.json</code> file.</li> <li>Rename the copied file with the appropriate language code provided by Discord (e.g., for Korean, use <code>ko.json</code>).</li> <li>Open the copied file and replace the existing text with your translations.</li> <li>Once you've made your changes, re-sync the bot.</li> </ol>"},{"location":"bot/config/language/#how-to-re-sync-the-bot","title":"How to re-sync the bot","text":"<ol> <li>Stop your bot and open your <code>settings.json</code> file.</li> <li>Remove the <code>version</code> key inside the settings file.</li> </ol> BeforeAfter settings.json<pre><code>{\n    ...\n    \"play\": [\"p\"],\n    \"view\": [\"v\"]\n},\n\"version\": \"v2.6.9\" # (1)\n</code></pre> <ol> <li>Your version might differ, such as <code>v2.6.6, v2.6.7, ...</code> However, this discrepancy is not significant.</li> </ol> settings.json<pre><code>{\n    ...\n    \"play\": [\"p\"],\n    \"view\": [\"v\"]\n}\n</code></pre>"},{"location":"bot/setup/","title":"Setup Guide","text":""},{"location":"bot/setup/#install-python","title":"Install Python","text":"<ul> <li>Vocard requires Python 3.11 or higher.</li> <li>Follow the guidelines here: Installing Python.</li> </ul>"},{"location":"bot/setup/#download-vocard-bot","title":"Download Vocard Bot","text":""},{"location":"bot/setup/#with-docker","title":"With Docker recommended","text":"<p>Using the official Docker image is the easiest way to set up Vocard, as it includes all necessary dependencies. Follow the platform-specific guide below to get started:</p> <ul> <li>For Linux, follow the Docker Setup Guide for Linux.</li> <li>For Windows, follow the Docker Setup Guide for Windows.</li> </ul>"},{"location":"bot/setup/#with-gif","title":"with git","text":"<ol> <li>Clone the repository:     <pre><code>git clone https://github.com/ChocoMeow/Vocard.git\n</code></pre></li> <li>Go to the directory:     <pre><code>cd Vocard\n</code></pre></li> <li>Install required packages, ideally by using a virtual environment:     <pre><code>python -m pip install -r requirements.txt\n</code></pre></li> </ol> <p>After installing all packages, you must configure the bot before starting.</p>"},{"location":"bot/setup/#configuration","title":"Configuration","text":"<ol> <li>Rename <code>settings Example.json</code> to <code>settings.json</code> and customize your settings.</li> <li> <p>Now, you can start your bot with <code>python main.py</code>.</p> </li> </ol>"},{"location":"bot/setup/docker-linux/","title":"Docker Installation Guide for Vocard on Linux","text":"<p>This guide explains how to set up and run Vocard using Docker on a Linux system. Follow the steps carefully to ensure a smooth installation.</p>"},{"location":"bot/setup/docker-linux/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker: Install Docker using the official guide.</li> <li>Docker Compose: Install Docker Compose using the official guide.</li> </ul> <p>Ensure both are installed and running before proceeding:</p> <pre><code>docker --version\ndocker compose version\n</code></pre>"},{"location":"bot/setup/docker-linux/#installation-options","title":"Installation Options","text":"<p>Choose one of the following methods to install Vocard. Method 1 (Pre-built Images) is recommended for most users due to its simplicity.</p>"},{"location":"bot/setup/docker-linux/#method-1-using-pre-built-images-recommended","title":"Method 1: Using Pre-built Images recommended","text":"<ol> <li> <p>Create Project Directory</p> <pre><code>mkdir -p /opt/vocard/lavalink\ncd /opt/vocard\n</code></pre> </li> <li> <p>Download Configuration Files</p> <p>Warning</p> <p>Existing files will be overwritten.</p> <pre><code>wget -O settings.json https://raw.githubusercontent.com/ChocoMeow/Vocard/main/settings%20Example.json\nwget -O lavalink/application.yml https://raw.githubusercontent.com/ChocoMeow/Vocard/main/examples/application.yml\nwget -O lavalink/Dockerfile-lavalink https://raw.githubusercontent.com/ChocoMeow/Vocard/main/lavalink/Dockerfile-lavalink\nwget -O docker-compose.yml https://raw.githubusercontent.com/ChocoMeow/Vocard/main/docker-compose.yml\n</code></pre> </li> <li> <p>Edit Configuration Files     Copy and modify the example configurations:</p> <pre><code>cp settings.json settings.json.bak\nnano settings.json\nnano lavalink/application.yml\n</code></pre> <p>Update the files with your credentials and settings as described in the Bot Configuration Guide.</p> </li> <li> <p>Verify Configuration</p> <ul> <li>Ensure ports in <code>docker-compose.yml</code> match those in <code>settings.json</code> and <code>application.yml</code>. Defaults are:<ul> <li>Lavalink: <code>2333</code></li> <li>MongoDB: <code>27017</code></li> </ul> </li> <li>Vocard uses a local Docker network, so ports are not exposed publicly unless modified.</li> <li>Verify all mandatory tokens are set in <code>settings.json</code>.</li> </ul> </li> <li> <p>Start Containers <pre><code>docker compose up -d\n</code></pre></p> </li> </ol>"},{"location":"bot/setup/docker-linux/#method-2-build-from-source","title":"Method 2: Build from Source","text":"<ol> <li> <p>Clone the Repository</p> <pre><code>git clone https://github.com/ChocoMeow/Vocard.git\ncd Vocard\n</code></pre> </li> <li> <p>Configure Docker Compose    Edit <code>docker-compose.yml</code> to build from source:</p> <ul> <li>Uncomment the <code>build</code> sections for <code>vocard</code> and <code>lavalink</code> services.</li> <li>Comment out the <code>image</code> lines.</li> </ul> <p>Example for <code>vocard</code> service:</p> <pre><code>vocard:\n    # image: ghcr.io/chocomeow/vocard:latest\n    build:\n        dockerfile: ./Dockerfile\n</code></pre> </li> <li> <p>Edit Configuration Files    Copy and modify the example configurations:</p> <pre><code>cp settings\\ Example.json settings.json\nnano settings.json\nnano lavalink/application.yml\n</code></pre> <p>Update the files with your credentials and settings as described in the Bot Configuration Guide.</p> </li> <li> <p>Build and Start Containers <pre><code>docker compose up -d\n</code></pre></p> </li> </ol>"},{"location":"bot/setup/docker-linux/#configuration-details","title":"Configuration Details","text":""},{"location":"bot/setup/docker-linux/#essential-settings","title":"Essential Settings","text":""},{"location":"bot/setup/docker-linux/#settingsjson","title":"settings.json","text":"<p>Ensure the MongoDB URL and Lavalink password are correctly set:</p> <pre><code>{\n    \"mongodb_url\": \"mongodb://admin:admin@vocard-db:27017\",\n    \"lavalink\": {\n        \"password\": \"youshallnotpass\"\n    }\n}\n</code></pre>"},{"location":"bot/setup/docker-linux/#project-directory-structure","title":"Project Directory Structure","text":"<pre><code>Vocard/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 mongo/              # MongoDB data storage\n\u251c\u2500\u2500 lavalink/\n\u2502   \u251c\u2500\u2500 application.yml     # Lavalink configuration\n\u2502   \u2514\u2500\u2500 Dockerfile-lavalink # Lavalink Dockerfile\n\u251c\u2500\u2500 settings.json           # Vocard settings\n\u251c\u2500\u2500 Dockerfile              # Vocard Dockerfile (if building from source)\n\u2514\u2500\u2500 docker-compose.yml      # Docker Compose configuration\n</code></pre>"},{"location":"bot/setup/docker-linux/#managing-services","title":"Managing Services","text":"<p>Use the following commands to manage your Vocard containers:</p> <ul> <li> <p>Start Services</p> <pre><code>docker compose up -d\n</code></pre> </li> <li> <p>Stop Services</p> <pre><code>docker compose down\n</code></pre> </li> <li> <p>View Logs</p> <pre><code>docker compose logs -f\n</code></pre> </li> <li> <p>Pull Updates and Restart <pre><code>docker compose pull &amp;&amp; docker compose up -d\n</code></pre></p> </li> </ul>"},{"location":"bot/setup/docker-linux/#troubleshooting","title":"Troubleshooting","text":""},{"location":"bot/setup/docker-linux/#checking-service-status","title":"Checking Service Status","text":"<p>If containers fail to start:</p> <pre><code>docker compose ps                   # View service status\ndocker compose logs [service_name]  # View logs for a specific service (e.g., vocard, lavalink)\n</code></pre>"},{"location":"bot/setup/docker-linux/#common-issues","title":"Common Issues","text":"<ul> <li>Command Errors: On some systems, use <code>docker-compose</code> instead of <code>docker compose</code>.</li> <li>Configuration Errors: Validate <code>settings.json</code> and <code>application.yml</code> using online tools like JSONLint or a YAML validator.</li> <li>Port Conflicts: Ensure ports <code>2333</code> (Lavalink) and <code>27017</code> (MongoDB) are not in use.</li> <li>Missing Tokens: Double-check that all required tokens are set in <code>settings.json</code>.</li> </ul> <p>Revisit the Bot Configuration Guide to ensure all steps are followed correctly.</p>"},{"location":"bot/setup/docker-windows/","title":"Docker Setup Guide for Windows","text":"<p>This guide explains how to set up Vocard using Docker Desktop on a Windows system. Follow the steps carefully to ensure a successful installation.</p>"},{"location":"bot/setup/docker-windows/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker Desktop: Download and install it from the official Docker Desktop for Windows guide. This includes Docker Engine and Docker Compose.</li> </ul> <p>Note</p> <p>After installation, ensure Docker Desktop is running. You can verify Docker is working by opening PowerShell and running: <pre><code>docker --version\ndocker compose version\n</code></pre> If either command fails, ensure Docker Desktop is installed and running.</p>"},{"location":"bot/setup/docker-windows/#installation-options","title":"Installation Options","text":"<p>Choose one of the following methods to install Vocard. Method 1 (Pre-built Images) is recommended for most users due to its simplicity.</p>"},{"location":"bot/setup/docker-windows/#method-1-using-pre-built-images-recommended","title":"Method 1: Using Pre-built Images recommended","text":"<p>This method uses pre-built Docker images for a quick and straightforward setup.</p> <ol> <li> <p>Open PowerShell as Administrator</p> <p>Right-click the Start menu, select Windows PowerShell (Admin), and confirm any UAC prompts.</p> </li> <li> <p>Create Project Directory</p> <p>Create a directory for your Vocard project and navigate to it:</p> <pre><code>New-Item -Path \"C:\\Program Files\\vocard\\lavalink\" -ItemType Directory -Force\nSet-Location -Path \"C:\\Program Files\\vocard\\\"\n</code></pre> </li> <li> <p>Download Config Files</p> <p>Warning</p> <p>Existing files in the directory will be overwritten. Back up any existing configurations if needed.</p> <pre><code>Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/ChocoMeow/Vocard/refs/heads/main/settings%20Example.json\" -OutFile \"settings.json\"\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/ChocoMeow/Vocard/refs/heads/main/examples/application.yml\" -OutFile \"lavalink\\application.yml\"\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/ChocoMeow/Vocard/refs/heads/main/lavalink/Dockerfile-lavalink\" -OutFile \"lavalink\\Dockerfile-lavalink\"\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/ChocoMeow/Vocard/refs/heads/main/docker-compose.yml\" -OutFile \"docker-compose.yml\"\n</code></pre> </li> <li> <p>Modify Configurations</p> <p>Note</p> <p>Consider using a code editor like Visual Studio Code for easier JSON and YAML editing. Refer to the Guide to Bot Configuration for details on required values (e.g., MongoDB URL, Lavalink password).</p> <pre><code>notepad settings.json\nnotepad lavalink\\application.yml\n</code></pre> <p>Edit files with your credentials/values according to this Bot Configuration Guide.</p> </li> <li> <p>Verify Configuration</p> <ul> <li>Ensure ports in <code>docker-compose.yml</code> match those in <code>settings.json</code> and <code>application.yml</code>. Defaults are:<ul> <li>Lavalink: <code>2333</code></li> <li>MongoDB: <code>27017</code></li> </ul> </li> <li>Vocard uses a local Docker network, so ports are not exposed publicly unless modified.</li> <li>Verify all mandatory tokens are set in <code>settings.json</code>.</li> </ul> </li> <li> <p>Start Containers (Launch the containers in detached mode)</p> <pre><code>docker compose up -d\n</code></pre> </li> </ol>"},{"location":"bot/setup/docker-windows/#method-2-build-from-source","title":"Method 2: Build from Source","text":"<p>This method builds Vocard from the source code, offering more control over the setup.</p> <p>Note</p> <p>Ensure Git for Windows is installed to use the git command.</p> <ol> <li> <p>Clone Repository (Clone the Vocard repository and navigate to it)     <pre><code>git clone https://github.com/ChocoMeow/Vocard.git C:\\Program Files\\vocard\nSet-Location -Path \"C:\\Program Files\\vocard\"\n</code></pre></p> </li> <li> <p>Enable Builds in docker-compose.yml</p> <p>Open docker-compose.yml in your editor and for each service:</p> <ul> <li>Edit <code>docker-compose.yml</code> to enable building from source:<ul> <li>For both <code>vocard</code> and <code>lavalink</code> services:<ul> <li>Uncomment the <code>build</code> sections.</li> <li>Comment out the <code>image</code> lines.</li> </ul> </li> </ul> </li> </ul> <p>Example for the vocard service:</p> <pre><code>vocard:\n# image: ghcr.io/chocomeow/vocard:latest\nbuild:\n    context: .\n    dockerfile: ./Dockerfile\n</code></pre> </li> <li> <p>Prepare Config Files</p> <p>Note</p> <p>Consider using a code editor like Visual Studio Code for easier JSON and YAML editing. Refer to the Guide to Bot Configuration for details on required values (e.g., MongoDB URL, Lavalink password).</p> <pre><code>Copy-Item \"settings Example.json\" settings.json -Force\nnotepad settings.json\nnotepad lavalink\\application.yml\n</code></pre> <p>Edit files with your credentials/values according to this Bot Configuration Guide.</p> </li> <li> <p>Start Containers (Build and start the containers)     <pre><code>docker compose up -d\n</code></pre></p> </li> </ol>"},{"location":"bot/setup/docker-windows/#configuration-details","title":"Configuration Details","text":""},{"location":"bot/setup/docker-windows/#settingsjson-essential-bits","title":"settings.json (essential bits)","text":"<pre><code>{\n    \"mongodb_url\": \"mongodb://admin:admin@vocard-db:27017\",\n    \"lavalink\": {\n        \"password\": \"youshallnotpass\"\n    }\n}\n</code></pre>"},{"location":"bot/setup/docker-windows/#volume-structure","title":"Volume Structure","text":"<pre><code>C:\\Program Files\\vocard\\\n\u251c\u2500\u2500 data\\\n\u2502   \u2514\u2500\u2500 mongo\\              # MongoDB data storage\n\u251c\u2500\u2500 lavalink\\\n\u2502   \u251c\u2500\u2500 application.yml     # Lavalink configuration\n\u2502   \u2514\u2500\u2500 Dockerfile-lavalink # Lavalink Dockerfile\n\u251c\u2500\u2500 settings.json           # Vocard settings\n\u251c\u2500\u2500 Dockerfile              # Vocard Dockerfile (if building from source)\n\u2514\u2500\u2500 docker-compose.yml      # Docker Compose configuration\n</code></pre>"},{"location":"bot/setup/docker-windows/#management-commands-powershell","title":"Management Commands (PowerShell)","text":"<p>Use the following commands to manage your Vocard containers:</p> <ul> <li> <p>Start Services</p> <pre><code>docker compose up -d\n</code></pre> </li> <li> <p>Stop Services</p> <pre><code>docker compose down\n</code></pre> </li> <li> <p>View Logs</p> <pre><code>docker compose logs -f\n</code></pre> </li> <li> <p>Pull Updates and Restart <pre><code>docker compose pull; docker compose up -d\n</code></pre></p> </li> </ul>"},{"location":"bot/setup/docker-windows/#troubleshooting","title":"Troubleshooting","text":""},{"location":"bot/setup/docker-windows/#healthcheck-failures","title":"Healthcheck Failures","text":"<pre><code>docker compose ps                   # View service status\ndocker compose logs [service_name]  # View logs for a specific service (e.g., vocard, lavalink)\n</code></pre>"},{"location":"bot/setup/docker-windows/#common-issues","title":"Common Issues","text":"<p>Usually all container failing to start issues are related to syntax errors or wrong values in configuration.</p> <ul> <li>Command Errors: On some systems, use <code>docker-compose</code> instead of <code>docker compose</code>.</li> <li>Configuration Errors: Validate <code>settings.json</code> and <code>application.yml</code> using online tools like JSONLint or a YAML validator.</li> <li>Port Conflicts: Ensure ports <code>2333</code> (Lavalink) and <code>27017</code> (MongoDB) are not in use.</li> <li>Missing Tokens: Double-check that all required tokens are set in <code>settings.json</code>.</li> </ul> <p>Revisit the Bot Configuration Guide to ensure all steps are followed correctly.</p>"},{"location":"bot/setup/installing-python/","title":"Python Installation","text":"<p>While some newer builds may be compatible, you might experience compatibility issues. For most platforms, the simplest way to install Python is to download the installer provided below. Alternatively, Linux users can install it directly through the command line using a package manager</p>"},{"location":"bot/setup/installing-python/#download-installer-windows-and-macos","title":"Download Installer (Windows and MacOS)","text":"<ol> <li>Navigate to Python Official Website</li> <li>Choose and download the installer that matches your operating system.</li> <li>Run the installer and follow the on-screen instructions, or manually install the package based on your selection.</li> </ol>"},{"location":"bot/setup/installing-python/#install-via-command-line-linux-only","title":"Install via Command Line (Linux only)","text":""},{"location":"bot/setup/installing-python/#ubuntu","title":"Ubuntu","text":"<ul> <li>For Ubuntu 20.04 or 22.04, refer to this guide for detailed installation steps.</li> <li>For Ubuntu 24.04, please visit this guide.</li> </ul>"},{"location":"bot/setup/systemd/","title":"Systemd Service","text":"<p>If you're running a Systemd-based Linux distribution, you may want to run Vocard Bot as a background service. To set this up, create a <code>vocard.service</code> file in the <code>/usr/lib/systemd/system</code> directory. Use the template below, ensuring you replace the placeholders within the <code>&lt;&gt;</code> brackets with your specific values:</p> vocard.service<pre><code>[Unit]\n# Description of the service\nDescription=Vocard Bot Service\n\n# Ensure the service starts after logging and networking are available\nAfter=syslog.target network.target\n\n[Service]\n# User and group under which the bot will run\nUser=&lt;usr&gt;\nGroup=&lt;usr&gt;\n\n# Directory where the application is located\nWorkingDirectory=&lt;/home/usr/vocard&gt;\n\n# Command to install dependencies and start the bot\nExecStart=/bin/bash -c 'pip install --no-cache-dir -r requirements.txt &amp;&amp; python3 main.py'\n\n# Restart the service if it fails\nRestart=on-failure\n\n# Wait 5 seconds before restarting\nRestartSec=5s\n\n[Install]\n# Enable the service to start on boot\nWantedBy=multi-user.target\n</code></pre> <p>To initiate the Vocard service, execute the following command</p> <pre><code>$ sudo systemctl daemon-reload\n$ sudo systemctl enable vocard\n$ sudo systemctl start vocard\n</code></pre> <p>In addition to the standard log files, you can view the service logs using: <pre><code>$ sudo journalctl -u vocard\n</code></pre></p>"},{"location":"dashboard/","title":"Vocard Dashboard","text":"<p>Welcome to the Vocard Dashboard! This project provides a user-friendly interface for managing the Vocard Discord bot, enabling users to control music playback, manage playlists, and customize settings easily.</p>"},{"location":"dashboard/#features","title":"Features","text":"<ul> <li>Music Playback Control: Play, pause, skip, and stop music directly from the dashboard.</li> <li>Playlist Management: Create, edit, and delete playlists.</li> <li>Search Functionality: Find songs from various sources quickly.</li> <li>User-Friendly Interface: Intuitive design for seamless navigation.</li> <li>Real-time Updates: Instant feedback on actions taken.</li> </ul>"},{"location":"dashboard/#example-dashboard","title":"Example Dashboard","text":"<p>Visit Vocard Dashboard</p>"},{"location":"dashboard/#screenshot","title":"Screenshot","text":""},{"location":"dashboard/#setup","title":"Setup","text":"<p>Please see the Setup Page in the docs to run this bot yourself!</p>"},{"location":"dashboard/#need-help","title":"Need Help?","text":"<p>Join the Vocard Support Discord for help or questions.</p>"},{"location":"dashboard/changelog/","title":"Changelog","text":"<p>Each release typically encompasses a variety of enhancements and corrections. Notable updates, along with any new features and significant alterations, are itemized for your convenience.</p>"},{"location":"dashboard/changelog/#2.0.1","title":"2.0.1 April 19, 2025","text":""},{"location":"dashboard/changelog/#new-features","title":"New Features:","text":"<ul> <li>The dashboard now supports Polish as well! 19cae99</li> </ul>"},{"location":"dashboard/changelog/#fixed","title":"Fixed:","text":"<ul> <li>Fixed issues with the effect panel not functioning correctly. 40d840c</li> <li>Resolved problems with decoding emoji characters. 5f48ded</li> </ul> <p>Full Changelog: v2.0.0 to v2.0.1</p>"},{"location":"dashboard/changelog/#2.0.0","title":"2.0.0 April 10, 2025","text":""},{"location":"dashboard/changelog/#important-note","title":"Important Note:","text":"<p>Your Vocard bot must be 2.7.0 or above to use this dashboard.</p>"},{"location":"dashboard/changelog/#new-features_1","title":"New Features:","text":"<ul> <li>Introduced a modern and user-friendly interface for the dashboard.</li> <li>Added options for users to customize dashboard themes.</li> <li>Users can edit, rename, and add songs to the Vocard playlist.</li> <li>Users can allow invites from others' playlists.</li> <li>Users can edit bot settings specific to their Discord server.</li> <li>Added a dedicated panel for managing sound effects within the dashboard.</li> <li>Integrated volume control functionality directly in the dashboard.</li> </ul>"},{"location":"dashboard/config/","title":"Configuration","text":""},{"location":"dashboard/config/#step-1-settings-up-settingsjson","title":"Step 1: Settings up <code>settings.json</code>","text":"<p>Rename <code>settings Example.json</code> to <code>settings.json</code> and customize your settings.</p> Latest settings.json<pre><code>{\n    \"host\": \"0.0.0.0\", # (1)\n    \"port\": \"8000\", # (2)\n    \"password\": \"\", # (3)\n    \"client_id\": \"\", # (4)\n    \"client_secret_id\": \"\", # (5)\n    \"secret_key\": \"\", # (6)\n    \"redirect_url\": \"http://127.0.0.1:8000/callback\", # (7)\n    \"logging\": { # (8)\n        \"file\": {\n            \"path\": \"./logs\", # (9)\n            \"enable\": true # (10)\n        },\n        \"level\": {\n            \"dashboard\": \"INFO\" # (11)\n        },\n        \"max_history\": 30 # (12)\n    }\n}\n</code></pre> <ol> <li>The hostname or IP address where the webapp will run. 'localhost' means it's accessible only from the same machine.</li> <li>The port number on which the webapp will listen for incoming requests. Default is often 8080</li> <li>The password required for the vocard bot to connect to the dashboard. This should be kept secure and not shared publicly.</li> <li>The client ID for the Discord bot used for OAuth authentication with Discord users. Required for user login and authorization. Get this from the Discord Developer Portal.</li> <li>The client secret associated with the Discord bot's client ID. This is used to securely authenticate the bot during the OAuth process. Obtain this from the Discord Developer Portal.</li> <li>A secret key used by webapp for secure sessions and CSRF protection. It is important to keep this value secret.</li> <li>The URL to which users will be redirected after authentication. Typically points to a callback endpoint in your app.</li> <li>Configuration for logging within the application.</li> <li>The directory where log files will be stored. Ensure this path exists and is writable.</li> <li>A flag to enable or disable logging to files. Set to true to log messages to the specified path.</li> <li>The logging level for the dashboard component of your app. 'INFO' captures general operational messages.</li> <li>The maximum number of log entries to keep in history, useful for limiting log size.</li> </ol>"},{"location":"dashboard/config/#step-2-enable-ipc-client-in-your-vocard-bot","title":"Step 2: Enable IPC Client in Your Vocard Bot","text":"<p>To configure the IPC Client in your Vocard Bot, follow these steps:</p> <ol> <li> <p>Open the Configuration File:</p> <ul> <li>Navigate to your Vocard Bot directory and open the <code>settings.json</code> file.</li> </ul> </li> <li> <p>Enter Your Dashboard Information:</p> <ul> <li>Update the configuration with the correct details based on your dashboard URL.</li> <li>If your dashboard URL is <code>http://domain.com:1234</code>, set the following:<ul> <li>Host: <code>domain.com</code></li> <li>Port: <code>1234</code></li> </ul> </li> </ul> </li> </ol>"},{"location":"dashboard/config/#step-3-adding-redirect-url","title":"Step 3: Adding Redirect URL","text":"<ol> <li>Open your browser and go to the Discord Developer Portal.</li> <li>Select your application.</li> <li>Navigate to the OAuth2 section.</li> <li>Click Add Redirect and paste the redirect_url you set in settings.json.</li> </ol>"},{"location":"dashboard/config/how-to-upgrade/","title":"How to upgrade","text":"<p>Warning</p> <p>Please note that the bot directory does not contain any personal  files before running the update command. Any such files will be deleted upon execution.</p> <p>Check the current version</p> <pre><code>python update.py -c\n</code></pre> <p>Install the latest version</p> <pre><code>python update.py -l\n</code></pre> <p>Install the specified version</p> <pre><code>python update.py -v VERSION\n</code></pre> <p>Install the beta version</p> <pre><code>python update.py -b\n</code></pre>"},{"location":"dashboard/config/language/","title":"Languages","text":"<p>Vocard Dashboard provides support for multiple languages. Additionally, Vocard Dashboard allows you to easily customize your own language. Simply follow the steps below.</p>"},{"location":"dashboard/config/language/#language-codes","title":"Language Codes","text":"<p>To find the appropriate <code>LANGUAGE_CODE</code>, you can refer to the IETF Language Tags or consult resources like:</p> <ul> <li>ISO 639 Language Codes</li> <li>Wikipedia: List of Language Codes</li> </ul>"},{"location":"dashboard/config/language/#add-translations","title":"Add Translations","text":"<ol> <li> <p>Create Translation Files: For each new language, run the following command:    <pre><code>pybabel init -i messages.pot -d translations -l LANGUAGE_CODE\n</code></pre>    Replace <code>LANGUAGE_CODE</code> with the appropriate code (e.g., <code>es</code> for Spanish).</p> </li> <li> <p>Add Translations: Navigate to:    <pre><code>translations/LANGUAGE_CODE/LC_MESSAGES/messages.po\n</code></pre>    Open the <code>.po</code> file and add your translations:    <pre><code>msgid \"Hello, World!\"\nmsgstr \"\u00a1Hola, Mundo!\"  # Spanish translation\n</code></pre></p> </li> <li> <p>Compile Translations: After adding translations, compile them:    <pre><code>pybabel compile -d translations\n</code></pre></p> </li> <li> <p>Test Your Application: Run your dashboard and verify the new language.</p> </li> </ol>"},{"location":"dashboard/setup/","title":"Setup Guide","text":""},{"location":"dashboard/setup/#install-python","title":"Install Python","text":"<ul> <li>Vocard Dashboard requires Python 3.11 or higher.</li> <li>Follow the guidelines here: Installing Python.</li> </ul>"},{"location":"dashboard/setup/#download-vocard-dashboard","title":"Download Vocard Dashboard","text":""},{"location":"dashboard/setup/#with-docker","title":"with docker recommended","text":"<p>Utilizing the official Docker image enables a quick setup, as it conveniently includes all necessary dependencies. To get started, simply pull the image using a terminal command:</p> Github <pre><code>docker pull ghcr.io/chocomeow/vocard-dashboard:latest\n</code></pre> <ol> <li>Configure the bot before starting the docker containers.</li> <li>Start the Docker containers in detached mode:     <pre><code>docker-compose up -d\n</code></pre></li> </ol>"},{"location":"dashboard/setup/#with-gif","title":"with git","text":"<ol> <li>Clone the repository:     <pre><code>git clone https://github.com/ChocoMeow/vocard-dashboard.git\n</code></pre></li> <li>Go to the directory:     <pre><code>cd Vocard Dashboard \n</code></pre></li> <li>Install required packages, ideally by using a virtual environment:     <pre><code>python -m pip install -r requirements.txt\n</code></pre></li> </ol> <p>After installing all packages, you must configure the bot before starting.</p>"},{"location":"dashboard/setup/#configuration","title":"Configuration","text":"<ol> <li>Rename <code>settings Example.json</code> to <code>settings.json</code> and customize your settings.</li> <li> <p>Now, you can start your bot with <code>python main.py</code>.</p> </li> </ol>"},{"location":"dashboard/setup/systemd/","title":"Systemd Service","text":"<p>If you're running a Systemd-based Linux distribution, you may want to run Vocard Dashboard as a background service. To set this up, create a <code>vocard-dashboard.service</code> file in the <code>/usr/lib/systemd/system</code> directory. Use the template below, ensuring you replace the placeholders within the <code>&lt;&gt;</code> brackets with your specific values:</p> vocard-dashboard.service<pre><code>[Unit]\n# Description of the service\nDescription=Vocard Dashboard Service\n\n# Ensure the service starts after logging and networking are available\nAfter=syslog.target network.target\n\n[Service]\n# User and group under which the bot will run\nUser=&lt;usr&gt;\nGroup=&lt;usr&gt;\n\n# Directory where the application is located\nWorkingDirectory=&lt;/home/usr/vocard-dashboard&gt;\n\n# Command to install dependencies and start the bot\nExecStart=/bin/bash -c 'pip install --no-cache-dir -r requirements.txt &amp;&amp; python3 main.py'\n\n# Restart the service if it fails\nRestart=on-failure\n\n# Wait 5 seconds before restarting\nRestartSec=5s\n\n[Install]\n# Enable the service to start on boot\nWantedBy=multi-user.target\n</code></pre> <p>To initiate the Vocard Dashboard service, execute the following command</p> <pre><code>$ sudo systemctl daemon-reload\n$ sudo systemctl enable vocard-dashboard\n$ sudo systemctl start vocard-dashboard\n</code></pre> <p>In addition to the standard log files, you can view the service logs using: <pre><code>$ sudo journalctl -u vocard-dashboard\n</code></pre></p>"},{"location":"dashboard/ssl/","title":"Adding HTTPS to Vocard Dashboard","text":"<p>To enhance security for your Vocard Dashboard, you can choose from the following methods to enable HTTPS:</p>"},{"location":"dashboard/ssl/#available-methods","title":"Available Methods","text":"<ul> <li> <p>Cloudflare Proxy   Use Cloudflare's proxy service to secure your traffic with HTTPS easily.</p> </li> <li> <p>Cloudflare Tunnel   Set up a secure tunnel from your server to Cloudflare, allowing for more flexible configurations.</p> </li> <li> <p>Nginx   Configure Nginx directly on your server for HTTPS, including the use of Let's Encrypt for free SSL certificates.</p> </li> </ul>"},{"location":"dashboard/ssl/#choose-your-method","title":"Choose Your Method","text":"<p>Select a method from the list above to get started with securing your Vocard Dashboard. Each method provides distinct advantages, so choose the one that best fits your setup and requirements.</p>"},{"location":"dashboard/ssl/cloudflare%20tunnel/","title":"Using Cloudflare Tunnel","text":"<p>To securely connect your Vocard Dashboard, follow these steps to create and configure a Cloudflare Tunnel using the Zero Trust platform.</p>"},{"location":"dashboard/ssl/cloudflare%20tunnel/#step-1-create-a-tunnel","title":"Step 1: Create a Tunnel","text":"<ol> <li> <p>Log in to Zero Trust: Navigate to the Zero Trust dashboard.</p> </li> <li> <p>Go to Networks &gt; Tunnels: In the sidebar, select Networks, then click on Tunnels.</p> </li> <li> <p>Create a Tunnel:</p> <ul> <li>Click on Create a tunnel.</li> <li>Choose Cloudflared as the connector type and click Next.</li> <li>Enter a name for your tunnel (e.g., <code>Vocard-Dashboard</code>) that reflects the resources you want to connect.</li> <li>Select Save tunnel.</li> </ul> </li> <li> <p>Install Cloudflared: </p> <ul> <li>Make sure the environment under Choose an environment matches your operating system.</li> <li>Copy the command provided in the dashboard and paste it into your terminal. Run the command to install and start Cloudflared.</li> <li>Once the command completes, your connector will appear in Zero Trust.</li> </ul> </li> <li> <p>Select Next: Continue to the next step.</p> </li> </ol>"},{"location":"dashboard/ssl/cloudflare%20tunnel/#step-2-connect-an-application-or-network","title":"Step 2: Connect an Application or Network","text":""},{"location":"dashboard/ssl/cloudflare%20tunnel/#2a-connect-an-application","title":"2a. Connect an Application","text":"<p>Before you can connect an application through your tunnel, ensure you have:</p> <ul> <li>Added your website to Cloudflare.</li> <li>Changed your domain nameservers to Cloudflare.</li> </ul> <p>To connect an application:</p> <ol> <li> <p>Add a Public Hostname:</p> <ul> <li>In the Public Hostnames tab, click Add a public hostname.</li> <li>Enter a subdomain and select a domain from the dropdown.</li> <li>Specify any subdomain or path information. Note: For multi-level subdomains, you will need to order an Advanced Certificate.</li> </ul> </li> <li> <p>Specify a Service:</p> <ul> <li>Enter the service URL (e.g., <code>https://localhost:8000</code>).</li> </ul> </li> <li> <p>Additional Application Settings:</p> <ul> <li>Add any parameters you would like for your tunnel configuration.</li> </ul> </li> <li> <p>Select Save Hostname: Your application is now publicly accessible on the Internet. To manage user access, consider creating an Access application.</p> </li> </ol>"},{"location":"dashboard/ssl/cloudflare%20tunnel/#2b-connect-a-network","title":"2b. Connect a Network","text":"<p>To connect a private network:</p> <ol> <li>In the Private Networks Tab:<ul> <li>Add an IP address or CIDR.</li> <li>Select Save tunnel.</li> </ul> </li> </ol>"},{"location":"dashboard/ssl/cloudflare%20tunnel/#step-3-test-your-setup","title":"Step 3: Test Your Setup","text":"<p>Navigate to https://yourdomain.com in your browser to verify that the HTTPS connection is working.</p>"},{"location":"dashboard/ssl/cloudflare/","title":"Using Cloudflare Proxy","text":""},{"location":"dashboard/ssl/cloudflare/#step-1-set-up-cloudflare","title":"Step 1: Set Up Cloudflare","text":"<ol> <li>Add Your Domain: Log in to your Cloudflare account and add your domain if you haven't already.</li> <li>Change DNS Settings: Ensure your A record points to your server's IP address and is proxied (orange cloud icon).</li> </ol>"},{"location":"dashboard/ssl/cloudflare/#step-2-enable-https","title":"Step 2: Enable HTTPS","text":"<ol> <li>SSL/TLS Settings: In the Cloudflare dashboard, navigate to the SSL/TLS settings.</li> <li>Set SSL Mode: Choose \"Full\" or \"Full (Strict)\" for better security.</li> <li>Automatic HTTPS Rewrites: Enable automatic HTTPS rewrites to help redirect HTTP traffic to HTTPS.</li> </ol>"},{"location":"dashboard/ssl/cloudflare/#step-3-test-your-setup","title":"Step 3: Test Your Setup","text":"<p>Navigate to https://yourdomain.com in your browser to verify that the HTTPS connection is working.</p>"},{"location":"dashboard/ssl/nginx/","title":"Using Nginx","text":""},{"location":"dashboard/ssl/nginx/#step-1-install-nginx","title":"Step 1: Install Nginx","text":"<p>If Nginx is not installed: <pre><code>sudo apt-get update\nsudo apt-get install nginx\n</code></pre></p>"},{"location":"dashboard/ssl/nginx/#step-2-configure-nginx","title":"Step 2: Configure Nginx","text":"<ol> <li>Create a Configuration File: <pre><code>sudo nano /etc/nginx/sites-available/vocard\n</code></pre> Add: <pre><code>server {\n    listen 80;\n    server_name yourdomain.com;\n\n    location / {\n        proxy_pass http://localhost:PORT;  # Replace with your dashboard's port\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre></li> <li> <p>Enable the Configuration: <pre><code>sudo ln -s /etc/nginx/sites-available/vocard /etc/nginx/sites-enabled/\n</code></pre></p> </li> <li> <p>Test and Restart Nginx: <pre><code>sudo nginx -t\nsudo systemctl restart nginx\n</code></pre></p> </li> </ol>"},{"location":"dashboard/ssl/nginx/#step-3-enable-https-with-lets-encrypt","title":"Step 3: Enable HTTPS with Let\u2019s Encrypt","text":"<ol> <li> <p>Install Certbot: <pre><code>sudo apt-get install certbot python3-certbot-nginx\n</code></pre></p> </li> <li> <p>Obtain a Certificate: <pre><code>sudo certbot --nginx -d yourdomain.com\n</code></pre></p> </li> <li> <p>Auto-Renewal: Ensure Certbot auto-renews the certificate: <pre><code>sudo certbot renew --dry-run\n</code></pre></p> </li> </ol>"}]}